// TODO: attr跟value可以写成map
@mixin create-iteration-item($name, $attr, $value) {
  .#{$name} {
    #{$attr}: $value;
  }
}

@mixin create-iteration($key, $attr, $names, $values) {
  @for $i from 1 through length($values) {
    $name: #{$key}-#{nth($names, $i)};
    @include create-iteration-item($name, $attr, #{nth($values, $i)});
    @if $attr == font-size {
      @include create-iteration-item($name, line-height, 1);
    }
    @if $attr == border-color {
      @include create-iteration-item($name, border-width, 1px);
      @include create-iteration-item($name, border-style, solid);
    }
  }
}

$gap_dir: (
  gapTypes: (m, p),
  typeValues: (margin, padding),
  directions: (t, r, b, l, x, y),
  directionValues: (top, right, bottom, left, kong, kong),
);
$gapTypes: map-get($gap_dir, gapTypes);
$directions: map-get($gap_dir, directions); 

@function create-gap-obj() {
  $obj: ();
  @each $j in $directions {
    @each $k in $gapTypes {
      $name: #{$k}#{$j};
      $value_k: #{nth(map-get($gap_dir,typeValues), index($gapTypes, $k))};
      $value_j: #{nth(map-get($gap_dir,directionValues), index($directions, $j))};
      @if $j == x {
        $obj: map-merge($obj, ($name: (#{$value_k}-left, #{$value_k}-right)));
      }
      @if $j == y {
        $obj: map-merge($obj, ($name: (#{$value_k}-top, #{$value_k}-bottom)));
      }
      @if $value_j != kong {
        $obj: map-merge($obj, ($name: #{$value_k}-#{$value_j}));
      }
    }
  }
  @return $obj;
}

@mixin create-gap($gapNames) {
  $map: create-gap-obj();
  @each $i in $gapNames {
    @each $j, $k in $map {
      $name: #{$j}-#{$i};
      @if length($k) > 1 {
        @include create-iteration-item($name, #{nth($k, 2)}, #{$i}px);
      }
      @include create-iteration-item($name, #{nth($k, 1)}, #{$i}px);
    }
  }
}
